import{_ as e,c as a,o as i,a2 as d}from"./chunks/framework.DniMO-iw.js";const m=JSON.parse('{"title":"Redis","description":"","frontmatter":{},"headers":[],"relativePath":"article/middleware/redis/index.md","filePath":"article/middleware/redis/index.md"}'),t={name:"article/middleware/redis/index.md"},r=d('<h1 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h1><h2 id="什么是redis" tabindex="-1">什么是Redis <a class="header-anchor" href="#什么是redis" aria-label="Permalink to &quot;什么是Redis&quot;">​</a></h2><p>Redis是一个开源的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。是一个非关系型、高性能的key-value数据库。 可存储的数据类型有：字符串<code>String</code>、列表<code>lsits</code>、集合<code>sets</code>、有序集合<code>sorted sets</code>、哈希表<code>hashes</code>、位图、 HyperLogLog、 地理空间索引等。 除此之外还用于分布式锁，支持事务、Lua脚本、发布/订阅、管道、事务等。</p><h2 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h2><p>优点</p><ul><li>基于内存的操作，速度非常快，秒表能达到10w次</li><li>支持多种数据类型。</li><li>支持持久化，持久化到磁盘，重启后数据还在。</li><li>支持事务</li><li>支持集群，主从复制</li><li>单线程模型，性能高；处理网络数据的读写和协议解析是多线程的。</li></ul><p>缺点</p><ul><li>不适合海量数据存储，因为数据存储在内存中，所以数据量越大，内存占用越大，</li><li>较难支持在线扩容</li></ul><h2 id="redis的线程模型" tabindex="-1">Redis的线程模型 <a class="header-anchor" href="#redis的线程模型" aria-label="Permalink to &quot;Redis的线程模型&quot;">​</a></h2><p>先介绍下Reactor模型，Reactor模型是Netty的线程模型，它将网络IO和应用逻辑分离，网络IO由Reactor线程负责，应用逻辑由业务线程负责。</p>',10),s=[r];function o(l,c,n,h,_,p){return i(),a("div",null,s)}const f=e(t,[["render",o]]);export{m as __pageData,f as default};
