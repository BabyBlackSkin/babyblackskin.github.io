import{_ as t,c as l,o as r,l as a,a as e}from"./chunks/framework.DniMO-iw.js";const x=JSON.parse('{"title":"Java序列化","description":"","frontmatter":{},"headers":[],"relativePath":"article/java/序列.md","filePath":"article/java/序列.md"}'),n={name:"article/java/序列.md"},o=a("h1",{id:"java序列化",tabindex:"-1"},[e("Java序列化 "),a("a",{class:"header-anchor",href:"#java序列化","aria-label":'Permalink to "Java序列化"'},"​")],-1),s=a("h2",{id:"什么是序列化和反序列化",tabindex:"-1"},[e("什么是序列化和反序列化 "),a("a",{class:"header-anchor",href:"#什么是序列化和反序列化","aria-label":'Permalink to "什么是序列化和反序列化"'},"​")],-1),c=a("ul",null,[a("li",null,[a("p",null,"序列化 序列化是指将对象的状态信息转换为可以存储或传输的形式的过程。在序列化过程中， 对象的状态（例如属性值）被转换成字节流（或其他形式的数据流），以便这些数据可以被有效地存储或通过网络传输。 一旦对象被序列化，它就可以被写入文件、内存、数据库或其他任何可以存储字节流的介质。通常是二进制流，也可以是JSON，XML等文本格式")]),a("li",null,[a("p",null,"反序列化 反序列化是序列化的逆过程，指的是将从文件、内存缓冲区或网络传输得到的数据重新恢复为对象的过程。 也就是说，将之前序列化产生的字节流转换回具有相同状态的对象。通过反序列化，程序可以在不同的运行时环境中重建原始对象，从而实现数据的持久化或分布式对象通信等功能。")])],-1),i=[o,s,c];function d(_,h,p,m,u,f){return r(),l("div",null,i)}const j=t(n,[["render",d]]);export{x as __pageData,j as default};
