import{_ as s,c as e,o as i,a2 as a}from"./chunks/framework.DniMO-iw.js";const l="/assets/img.BDKPSg9J.png",F=JSON.parse('{"title":"Selector","description":"","frontmatter":{},"headers":[],"relativePath":"article/middleware/netty/3_NIO/Selector.md","filePath":"article/middleware/netty/3_NIO/Selector.md"}'),n={name:"article/middleware/netty/3_NIO/Selector.md"},t=a(`<h1 id="selector" tabindex="-1">Selector <a class="header-anchor" href="#selector" aria-label="Permalink to &quot;Selector&quot;">​</a></h1><h2 id="基本介绍" tabindex="-1">基本介绍 <a class="header-anchor" href="#基本介绍" aria-label="Permalink to &quot;基本介绍&quot;">​</a></h2><p><code>selector</code>称为选择器，也叫多路复用器，是<code>Java NIO</code>中的核心组件，用于检查注册的<code>Channel</code> 是否可读可写。实现单线程下管理员多个<code>Channel</code>。</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><p>1、创建<code>selector</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Selector</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> selector</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Selector.open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>2、将<code>channel</code>注册到<code>selector</code>中</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将Channel设置为非阻塞</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serverSocketChannel.configureBlocking(false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注册到selector中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel.register(selector,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SelectionKey.OP_READ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>channel</code>必须是非阻塞的。继承自<code>AbstractSelectableChannel</code>。 <code>AbstractSelectableChannel</code>有一个抽象方法<code>configureBlocking</code>， 用于切换阻塞或者非阻塞模式（如果是<code>channel</code>是阻塞模式，则会抛出<code>IllegalBlockingModeException</code>） <img src="`+l+`" alt="img.png"></p><p>因此像<code>FileChannel</code>不适用于<code>selector</code>，继续自<code>AbstractInterruptibleChannel</code>，无法切换为非阻塞模式，</p><p><code>register()</code>的第二个参数，代表监听的事件，<code>SelectionKey</code>中定义了4种事件，一个<code>channel</code>支持处理多个事件， 如，同时监听<code>read</code>和<code>write</code>事件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel.register(selector,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SelectionKey.OP_READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SelectionKey.OP_WRITE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong><code>OP_CONNECT</code></strong>：<code>channel</code>已经连接到服务器，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boolean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isConnectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (readyOps() &amp; OP_CONNECT) != 0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong><code>OP_ACCEPT</code></strong>：<code>Server Stock Channel</code>已经准备好接收来自客户端的连接，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boolean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (readyOps() &amp; OP_ACCEPT) != 0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong><code>OP_READ</code></strong>：有数据可读</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boolean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (readyOps() &amp; OP_READ) != 0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong><code>OP_WRITE</code></strong>：有数据可写</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boolean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isWritable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (readyOps() &amp; OP_WRITE) != 0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="selectionkey" tabindex="-1">SelectionKey <a class="header-anchor" href="#selectionkey" aria-label="Permalink to &quot;SelectionKey&quot;">​</a></h2><p>维护了选择器、通道、事件的映射关系，<code>SelectionKey</code>中定义了4种事件，一个<code>channel</code>支持处理多个事件，如，同时监听<code>read</code>和<code>write</code>事件</p>`,22),h=[t];function p(c,o,d,k,r,g){return i(),e("div",null,h)}const y=s(n,[["render",p]]);export{F as __pageData,y as default};
