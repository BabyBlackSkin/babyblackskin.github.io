import{_ as s}from"./chunks/1.CTHG9NdY.js";import{_ as i,c as a,o as n,a2 as h}from"./chunks/framework.DniMO-iw.js";const l="/assets/2.BajLLoDa.png",B=JSON.parse('{"title":"Java BIO","description":"","frontmatter":{},"headers":[],"relativePath":"article/middleware/netty/2_BIO.md","filePath":"article/middleware/netty/2_BIO.md"}'),k={name:"article/middleware/netty/2_BIO.md"},t=h('<h1 id="java-bio" tabindex="-1">Java BIO <a class="header-anchor" href="#java-bio" aria-label="Permalink to &quot;Java BIO&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><code>Java BIO</code> 就是传统的<code>java io</code> 编程，其相关的类和接口在 <code>java.io</code>。 <code>IO(blocking I/O)</code> ：同步并阻塞(传统阻塞型)，服务器实现模式为一个连接对应一个线程， 即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销 （阻塞），可以通过线程池机制改善(实现多个客户连接服务器)。</p><h2 id="工作机制" tabindex="-1">工作机制 <a class="header-anchor" href="#工作机制" aria-label="Permalink to &quot;工作机制&quot;">​</a></h2><ul><li>服务器启动一个ServerSocket；</li><li>服务器等待客户端连接，客户端连接后，会创建一个Socket；</li><li>客户端发出请求后, 先咨询服务器是否有响应，如果没有则会等待，或者被拒绝；</li><li>如果有响应，客户端线程会等待请求结束后，再继续执行。</li></ul><p>每有一个客户端连接，就需要创建一个单独的线程，这极大的浪费了资源。当然可以采用线程池，但BIO仍然是阻塞的。 <img src="'+s+`" alt="img.png"></p><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><p>使用BIO模式实现一个简单的服务器，监听8880端口，当有客户端连接时，就启动一个线程处理客户端请求。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Demo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> static</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> void</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String[]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">throws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IOException</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ExecutorService</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> newCachedThreadPool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Executors.newCachedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 创建ServerSocket</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ServerSocket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serverSocket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ServerSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">8880</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        System.out.println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;服务器启动了&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 监听,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 等待客户端连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            System.out.println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;等待连接....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            final</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serverSocket.accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            System.out.println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;连接到一个客户端&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 创建一个线程，进行通讯</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            newCachedThreadPool.execute((</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; handler(socket));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> static</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> void</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InputStream </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">inputStream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> socket.getInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            byte[]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> byte[1024]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 读取客户端数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                System.out.println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;read....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                int</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inputStream.read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    System.out.printf(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;收到客户端消息：%s\\n&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bytes,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } catch (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IOException</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            e.printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>打开CMD，输入<code>telnet 127.0.0.1 8880</code>，按下<code>Ctrl</code>+<code>]</code>，即可输入<code>send</code>命令发送消息 <img src="`+l+'" alt="img.png"></p>',10),p=[t];function e(r,F,E,d,g,y){return n(),a("div",null,p)}const C=i(k,[["render",e]]);export{B as __pageData,C as default};
